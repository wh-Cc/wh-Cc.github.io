import{_ as o,c as t,o as a,a4 as e}from"./chunks/framework.ZkTbufXI.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Vue/index.md","filePath":"Vue/index.md"}'),l={name:"Vue/index.md"},r=e('<p>Vue 3 作为当前流行的前端框架之一，有许多常用的知识点，以下是一些关键点：</p><h3 id="_1-响应式系统" tabindex="-1">1. 响应式系统 <a class="header-anchor" href="#_1-响应式系统" aria-label="Permalink to &quot;1. 响应式系统&quot;">​</a></h3><ul><li><strong>Reactive</strong>: 创建响应式对象。</li><li><strong>Ref</strong>: 创建基本的响应式引用。</li><li><strong>Computed</strong>: 声明性描述响应式数据的派生状态。</li><li><strong>Watch</strong>: 观察和响应 Vue 响应式状态的变化。</li></ul><h3 id="_2-composition-api" tabindex="-1">2. Composition API <a class="header-anchor" href="#_2-composition-api" aria-label="Permalink to &quot;2. Composition API&quot;">​</a></h3><ul><li><strong>Setup</strong>: Vue 3 的组合式 API 的入口函数。</li><li><strong>Props</strong> 和 <strong>Emits</strong>: 组件的输入和输出。</li><li><strong>Provide / Inject</strong>: 跨组件的状态共享。</li></ul><h3 id="_3-模板语法" tabindex="-1">3. 模板语法 <a class="header-anchor" href="#_3-模板语法" aria-label="Permalink to &quot;3. 模板语法&quot;">​</a></h3><ul><li><strong>v-bind</strong>: 动态绑定属性。</li><li><strong>v-model</strong>: 创建数据双向绑定。</li><li><strong>v-on</strong>: 监听 DOM 事件。</li><li><strong>v-for</strong>: 渲染列表。</li><li><strong>v-if / v-else-if / v-else</strong>: 条件渲染。</li><li><strong>v-slot</strong>: 作用域插槽。</li></ul><h3 id="_4-组件" tabindex="-1">4. 组件 <a class="header-anchor" href="#_4-组件" aria-label="Permalink to &quot;4. 组件&quot;">​</a></h3><ul><li><strong>组件定义</strong>: 使用 <code>defineComponent</code> 或 <code>&lt;script setup&gt;</code>。</li><li><strong>组件注册</strong>: 全局注册和局部注册。</li><li><strong>组件通信</strong>: 父子组件、事件发射、插槽分发。</li></ul><h3 id="_5-动态和条件渲染" tabindex="-1">5. 动态和条件渲染 <a class="header-anchor" href="#_5-动态和条件渲染" aria-label="Permalink to &quot;5. 动态和条件渲染&quot;">​</a></h3><ul><li><strong>v-if</strong>: 条件性地渲染元素。</li><li><strong>v-show</strong>: 切换元素的 CSS 显示属性。</li><li><strong>component</strong>: 动态组件。</li></ul><h3 id="_6-列表和键" tabindex="-1">6. 列表和键 <a class="header-anchor" href="#_6-列表和键" aria-label="Permalink to &quot;6. 列表和键&quot;">​</a></h3><ul><li><strong>v-for</strong>: 用于渲染列表，需要使用 <code>key</code> 属性以提高性能。</li></ul><h3 id="_7-事件处理" tabindex="-1">7. 事件处理 <a class="header-anchor" href="#_7-事件处理" aria-label="Permalink to &quot;7. 事件处理&quot;">​</a></h3><ul><li><strong>事件修饰符</strong>: 如 <code>.stop</code>, <code>.prevent</code>, <code>.capture</code> 等。</li></ul><h3 id="_8-表单输入绑定" tabindex="-1">8. 表单输入绑定 <a class="header-anchor" href="#_8-表单输入绑定" aria-label="Permalink to &quot;8. 表单输入绑定&quot;">​</a></h3><ul><li><strong>text</strong>, <strong>checkbox</strong>, <strong>radio</strong>, <strong>select</strong> 等类型的输入绑定。</li></ul><h3 id="_9-计算属性和侦听器" tabindex="-1">9. 计算属性和侦听器 <a class="header-anchor" href="#_9-计算属性和侦听器" aria-label="Permalink to &quot;9. 计算属性和侦听器&quot;">​</a></h3><ul><li><strong>计算属性</strong>: 依赖其它响应式数据的缓存属性。</li><li><strong>侦听器</strong>: 对响应式数据的变化做出响应。</li></ul><h3 id="_10-生命周期钩子" tabindex="-1">10. 生命周期钩子 <a class="header-anchor" href="#_10-生命周期钩子" aria-label="Permalink to &quot;10. 生命周期钩子&quot;">​</a></h3><ul><li><strong>onMounted</strong>: 组件挂载后调用。</li><li><strong>onUpdated</strong>: 组件更新时调用。</li><li><strong>onUnmounted</strong>: 组件卸载前调用。</li></ul><h3 id="_11-工具函数" tabindex="-1">11. 工具函数 <a class="header-anchor" href="#_11-工具函数" aria-label="Permalink to &quot;11. 工具函数&quot;">​</a></h3><ul><li><strong>nextTick</strong>: 延迟回调的执行直到下次 DOM 更新循环之后。</li></ul><h3 id="_12-组件库" tabindex="-1">12. 组件库 <a class="header-anchor" href="#_12-组件库" aria-label="Permalink to &quot;12. 组件库&quot;">​</a></h3><ul><li><strong>Vue Router</strong>: 为 Vue.js 应用添加路由功能。</li><li><strong>Vuex</strong>: 状态管理库。</li><li><strong>Vue CLI</strong>: 项目脚手架和构建工具。</li></ul><h3 id="_13-性能优化" tabindex="-1">13. 性能优化 <a class="header-anchor" href="#_13-性能优化" aria-label="Permalink to &quot;13. 性能优化&quot;">​</a></h3><ul><li><strong>虚拟 DOM</strong>: Vue 使用虚拟 DOM 来提高性能。</li><li><strong>shouldComponentUpdate</strong>: 控制组件的重新渲染。</li></ul><h3 id="_14-可访问性和国际化" tabindex="-1">14. 可访问性和国际化 <a class="header-anchor" href="#_14-可访问性和国际化" aria-label="Permalink to &quot;14. 可访问性和国际化&quot;">​</a></h3><ul><li><strong>ARIA 属性</strong>: 提高应用的可访问性。</li><li><strong>i18n 插件</strong>: 支持国际化。</li></ul><h3 id="_15-部署和构建" tabindex="-1">15. 部署和构建 <a class="header-anchor" href="#_15-部署和构建" aria-label="Permalink to &quot;15. 部署和构建&quot;">​</a></h3><ul><li><strong>Vite</strong>: 现代前端构建工具，提供快速的冷启动和即时模块热更新。</li><li><strong>Rollup</strong>, <strong>Webpack</strong>: 构建和打包工具。</li></ul><h3 id="_16-开发者工具" tabindex="-1">16. 开发者工具 <a class="header-anchor" href="#_16-开发者工具" aria-label="Permalink to &quot;16. 开发者工具&quot;">​</a></h3><ul><li><strong>Vue Devtools</strong>: 浏览器扩展，用于调试 Vue 应用。</li></ul><h3 id="_17-typescript-支持" tabindex="-1">17. TypeScript 支持 <a class="header-anchor" href="#_17-typescript-支持" aria-label="Permalink to &quot;17. TypeScript 支持&quot;">​</a></h3><ul><li>Vue 3 的类型定义和对 TypeScript 的原生支持。</li></ul><h3 id="_18-单文件组件-sfc" tabindex="-1">18. 单文件组件（SFC） <a class="header-anchor" href="#_18-单文件组件-sfc" aria-label="Permalink to &quot;18. 单文件组件（SFC）&quot;">​</a></h3><ul><li>Vue 的 <code>.vue</code> 文件，支持模板、脚本和样式的组合。</li></ul><h3 id="_19-自定义指令" tabindex="-1">19. 自定义指令 <a class="header-anchor" href="#_19-自定义指令" aria-label="Permalink to &quot;19. 自定义指令&quot;">​</a></h3><ul><li>创建自定义 DOM 指令以封装 DOM 操作逻辑。</li></ul><h3 id="_20-环境适配" tabindex="-1">20. 环境适配 <a class="header-anchor" href="#_20-环境适配" aria-label="Permalink to &quot;20. 环境适配&quot;">​</a></h3><ul><li>Vue 3 支持 SSR（服务端渲染）和静态生成。</li></ul><p>这些知识点覆盖了 Vue 3 的大部分常用特性和最佳实践，是学习和使用 Vue 3 的基础。</p>',42),i=[r];function n(s,u,h,d,c,g){return a(),t("div",null,i)}const b=o(l,[["render",n]]);export{p as __pageData,b as default};
